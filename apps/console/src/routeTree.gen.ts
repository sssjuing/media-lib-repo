/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteImport } from './routes/home'
import { Route as IndexRouteImport } from './routes/index'
import { Route as VideosIndexRouteImport } from './routes/videos/index'
import { Route as ActressesIndexRouteImport } from './routes/actresses/index'
import { Route as VideosCreateRouteImport } from './routes/videos/create'
import { Route as ActressesCreateRouteImport } from './routes/actresses/create'
import { Route as VideosVideoIdEditRouteImport } from './routes/videos/$videoId/edit'
import { Route as ActressesActressIdVideosRouteImport } from './routes/actresses/$actressId/videos'
import { Route as ActressesActressIdEditRouteImport } from './routes/actresses/$actressId/edit'

const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const VideosIndexRoute = VideosIndexRouteImport.update({
  id: '/videos/',
  path: '/videos/',
  getParentRoute: () => rootRouteImport,
} as any)
const ActressesIndexRoute = ActressesIndexRouteImport.update({
  id: '/actresses/',
  path: '/actresses/',
  getParentRoute: () => rootRouteImport,
} as any)
const VideosCreateRoute = VideosCreateRouteImport.update({
  id: '/videos/create',
  path: '/videos/create',
  getParentRoute: () => rootRouteImport,
} as any)
const ActressesCreateRoute = ActressesCreateRouteImport.update({
  id: '/actresses/create',
  path: '/actresses/create',
  getParentRoute: () => rootRouteImport,
} as any)
const VideosVideoIdEditRoute = VideosVideoIdEditRouteImport.update({
  id: '/videos/$videoId/edit',
  path: '/videos/$videoId/edit',
  getParentRoute: () => rootRouteImport,
} as any)
const ActressesActressIdVideosRoute =
  ActressesActressIdVideosRouteImport.update({
    id: '/actresses/$actressId/videos',
    path: '/actresses/$actressId/videos',
    getParentRoute: () => rootRouteImport,
  } as any)
const ActressesActressIdEditRoute = ActressesActressIdEditRouteImport.update({
  id: '/actresses/$actressId/edit',
  path: '/actresses/$actressId/edit',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/actresses/create': typeof ActressesCreateRoute
  '/videos/create': typeof VideosCreateRoute
  '/actresses': typeof ActressesIndexRoute
  '/videos': typeof VideosIndexRoute
  '/actresses/$actressId/edit': typeof ActressesActressIdEditRoute
  '/actresses/$actressId/videos': typeof ActressesActressIdVideosRoute
  '/videos/$videoId/edit': typeof VideosVideoIdEditRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/actresses/create': typeof ActressesCreateRoute
  '/videos/create': typeof VideosCreateRoute
  '/actresses': typeof ActressesIndexRoute
  '/videos': typeof VideosIndexRoute
  '/actresses/$actressId/edit': typeof ActressesActressIdEditRoute
  '/actresses/$actressId/videos': typeof ActressesActressIdVideosRoute
  '/videos/$videoId/edit': typeof VideosVideoIdEditRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/actresses/create': typeof ActressesCreateRoute
  '/videos/create': typeof VideosCreateRoute
  '/actresses/': typeof ActressesIndexRoute
  '/videos/': typeof VideosIndexRoute
  '/actresses/$actressId/edit': typeof ActressesActressIdEditRoute
  '/actresses/$actressId/videos': typeof ActressesActressIdVideosRoute
  '/videos/$videoId/edit': typeof VideosVideoIdEditRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/actresses/create'
    | '/videos/create'
    | '/actresses'
    | '/videos'
    | '/actresses/$actressId/edit'
    | '/actresses/$actressId/videos'
    | '/videos/$videoId/edit'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/actresses/create'
    | '/videos/create'
    | '/actresses'
    | '/videos'
    | '/actresses/$actressId/edit'
    | '/actresses/$actressId/videos'
    | '/videos/$videoId/edit'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/actresses/create'
    | '/videos/create'
    | '/actresses/'
    | '/videos/'
    | '/actresses/$actressId/edit'
    | '/actresses/$actressId/videos'
    | '/videos/$videoId/edit'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  ActressesCreateRoute: typeof ActressesCreateRoute
  VideosCreateRoute: typeof VideosCreateRoute
  ActressesIndexRoute: typeof ActressesIndexRoute
  VideosIndexRoute: typeof VideosIndexRoute
  ActressesActressIdEditRoute: typeof ActressesActressIdEditRoute
  ActressesActressIdVideosRoute: typeof ActressesActressIdVideosRoute
  VideosVideoIdEditRoute: typeof VideosVideoIdEditRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/videos/': {
      id: '/videos/'
      path: '/videos'
      fullPath: '/videos'
      preLoaderRoute: typeof VideosIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/actresses/': {
      id: '/actresses/'
      path: '/actresses'
      fullPath: '/actresses'
      preLoaderRoute: typeof ActressesIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/videos/create': {
      id: '/videos/create'
      path: '/videos/create'
      fullPath: '/videos/create'
      preLoaderRoute: typeof VideosCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/actresses/create': {
      id: '/actresses/create'
      path: '/actresses/create'
      fullPath: '/actresses/create'
      preLoaderRoute: typeof ActressesCreateRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/videos/$videoId/edit': {
      id: '/videos/$videoId/edit'
      path: '/videos/$videoId/edit'
      fullPath: '/videos/$videoId/edit'
      preLoaderRoute: typeof VideosVideoIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/actresses/$actressId/videos': {
      id: '/actresses/$actressId/videos'
      path: '/actresses/$actressId/videos'
      fullPath: '/actresses/$actressId/videos'
      preLoaderRoute: typeof ActressesActressIdVideosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/actresses/$actressId/edit': {
      id: '/actresses/$actressId/edit'
      path: '/actresses/$actressId/edit'
      fullPath: '/actresses/$actressId/edit'
      preLoaderRoute: typeof ActressesActressIdEditRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  ActressesCreateRoute: ActressesCreateRoute,
  VideosCreateRoute: VideosCreateRoute,
  ActressesIndexRoute: ActressesIndexRoute,
  VideosIndexRoute: VideosIndexRoute,
  ActressesActressIdEditRoute: ActressesActressIdEditRoute,
  ActressesActressIdVideosRoute: ActressesActressIdVideosRoute,
  VideosVideoIdEditRoute: VideosVideoIdEditRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
