/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as HomeRouteImport } from './routes/home'
import { Route as IndexRouteImport } from './routes/index'
import { Route as ResourceIndexRouteImport } from './routes/resource/index'
import { Route as ResourceSupplierIndexRouteImport } from './routes/resource/supplier/index'
import { Route as ResourceSupplierOutsideRouteImport } from './routes/resource/supplier/outside'
import { Route as ResourceSupplierInsideRouteImport } from './routes/resource/supplier/inside'

const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceIndexRoute = ResourceIndexRouteImport.update({
  id: '/resource/',
  path: '/resource/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceSupplierIndexRoute = ResourceSupplierIndexRouteImport.update({
  id: '/resource/supplier/',
  path: '/resource/supplier/',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceSupplierOutsideRoute = ResourceSupplierOutsideRouteImport.update({
  id: '/resource/supplier/outside',
  path: '/resource/supplier/outside',
  getParentRoute: () => rootRouteImport,
} as any)
const ResourceSupplierInsideRoute = ResourceSupplierInsideRouteImport.update({
  id: '/resource/supplier/inside',
  path: '/resource/supplier/inside',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/resource': typeof ResourceIndexRoute
  '/resource/supplier/inside': typeof ResourceSupplierInsideRoute
  '/resource/supplier/outside': typeof ResourceSupplierOutsideRoute
  '/resource/supplier': typeof ResourceSupplierIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/resource': typeof ResourceIndexRoute
  '/resource/supplier/inside': typeof ResourceSupplierInsideRoute
  '/resource/supplier/outside': typeof ResourceSupplierOutsideRoute
  '/resource/supplier': typeof ResourceSupplierIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/home': typeof HomeRoute
  '/resource/': typeof ResourceIndexRoute
  '/resource/supplier/inside': typeof ResourceSupplierInsideRoute
  '/resource/supplier/outside': typeof ResourceSupplierOutsideRoute
  '/resource/supplier/': typeof ResourceSupplierIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/home'
    | '/resource'
    | '/resource/supplier/inside'
    | '/resource/supplier/outside'
    | '/resource/supplier'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/home'
    | '/resource'
    | '/resource/supplier/inside'
    | '/resource/supplier/outside'
    | '/resource/supplier'
  id:
    | '__root__'
    | '/'
    | '/home'
    | '/resource/'
    | '/resource/supplier/inside'
    | '/resource/supplier/outside'
    | '/resource/supplier/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  HomeRoute: typeof HomeRoute
  ResourceIndexRoute: typeof ResourceIndexRoute
  ResourceSupplierInsideRoute: typeof ResourceSupplierInsideRoute
  ResourceSupplierOutsideRoute: typeof ResourceSupplierOutsideRoute
  ResourceSupplierIndexRoute: typeof ResourceSupplierIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource/': {
      id: '/resource/'
      path: '/resource'
      fullPath: '/resource'
      preLoaderRoute: typeof ResourceIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource/supplier/': {
      id: '/resource/supplier/'
      path: '/resource/supplier'
      fullPath: '/resource/supplier'
      preLoaderRoute: typeof ResourceSupplierIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource/supplier/outside': {
      id: '/resource/supplier/outside'
      path: '/resource/supplier/outside'
      fullPath: '/resource/supplier/outside'
      preLoaderRoute: typeof ResourceSupplierOutsideRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/resource/supplier/inside': {
      id: '/resource/supplier/inside'
      path: '/resource/supplier/inside'
      fullPath: '/resource/supplier/inside'
      preLoaderRoute: typeof ResourceSupplierInsideRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  HomeRoute: HomeRoute,
  ResourceIndexRoute: ResourceIndexRoute,
  ResourceSupplierInsideRoute: ResourceSupplierInsideRoute,
  ResourceSupplierOutsideRoute: ResourceSupplierOutsideRoute,
  ResourceSupplierIndexRoute: ResourceSupplierIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
